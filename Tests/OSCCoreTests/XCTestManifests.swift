#if !canImport(ObjectiveC)
import XCTest

extension AddressMatcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AddressMatcherTests = [
        ("testMatcherFunction", testMatcherFunction),
    ]
}

extension DispatcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DispatcherTests = [
        ("testDispatchWithMatchingAddress", testDispatchWithMatchingAddress),
        ("testDispatchWithMatchingAddresses", testDispatchWithMatchingAddresses),
        ("testDispatchWithNonMatchingSubComponents", testDispatchWithNonMatchingSubComponents),
        ("testDispatchWithNonMatchingRootComponents", testDispatchWithNonMatchingRootComponents),
        ("testDispatchWithNonMatchingAddresses", testDispatchWithNonMatchingAddresses),
    ]
}

extension OSCBundleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OSCBundleTests = [
        ("testNoArgMessage", testNoArgMessage),
    ]
}

extension OSCMessageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OSCMessageTests = [
        ("testNoArgMessage", testNoArgMessage),
        ("testSingleArgMessage", testSingleArgMessage),
        ("testMessageHavingNilArgument", testMessageHavingNilArgument),
        ("testMultipleArgsMessage", testMultipleArgsMessage),
        ("testMessageHavingSymbolArgument", testMessageHavingSymbolArgument),
        ("testMessageHavingDoubleArgument", testMessageHavingDoubleArgument),
        ("testMessageHavingInfinityArgument", testMessageHavingInfinityArgument),
        ("testMessageHavingRGBAArgument", testMessageHavingRGBAArgument),
        ("testMessageHavingMIDIArgument", testMessageHavingMIDIArgument),
        ("testMessageHavingEmptyBlob", testMessageHavingEmptyBlob),
        ("testMessageHavingBlob", testMessageHavingBlob),
        ("testMessageHavingPaddedBlob", testMessageHavingPaddedBlob),
        ("testMessageHavingEmptyArray", testMessageHavingEmptyArray),
        ("testMessageHavingArrayOfNoValueArgs", testMessageHavingArrayOfNoValueArgs),
    ]
}

extension OSCTimeTagTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OSCTimeTagTests = [
        ("testImmediateTimeTagToDateConversion", testImmediateTimeTagToDateConversion),
        ("testSecondsSince1900TimeTagConversion", testSecondsSince1900TimeTagConversion),
    ]
}

extension ValueConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueConversionTests = [
        ("testBooleanConversion", testBooleanConversion),
        ("testCharacterConversion", testCharacterConversion),
        ("testEmptyStringConversion", testEmptyStringConversion),
        ("testBasicStringConversion", testBasicStringConversion),
        ("testSymbolConversion", testSymbolConversion),
        ("testInt32Conversion", testInt32Conversion),
        ("testInt64Conversion", testInt64Conversion),
        ("testIntConversion", testIntConversion),
        ("testFloat32Conversion", testFloat32Conversion),
        ("testDoubleConversion", testDoubleConversion),
        ("testImmediateTimeTagConversion", testImmediateTimeTagConversion),
        ("testTimeTagConversion", testTimeTagConversion),
        ("testFixedPrecisionToDoubleConversion", testFixedPrecisionToDoubleConversion),
        ("testMIDIConversion", testMIDIConversion),
        ("testRGBAConversion", testRGBAConversion),
        ("testEmptyBlobConversion", testEmptyBlobConversion),
        ("testBlobConversion", testBlobConversion),
        ("testPaddedBlobConversion", testPaddedBlobConversion),
        ("testArrayConversion", testArrayConversion),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(OSCMessageTests.__allTests__OSCMessageTests),
        testCase(ValueConversionTests.__allTests__ValueConversionTests),
        testCase(AddressMatcherTests.__allTests__AddressMatcherTests),
        testCase(DispatcherTests.__allTests__DispatcherTests),
        testCase(OSCBundleTests.__allTests__OSCBundleTests),
        testCase(OSCTimeTagTests.__allTests__OSCTimeTagTests),
    ]
}
#endif
